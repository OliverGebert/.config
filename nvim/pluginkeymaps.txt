lua/vim-options.lua:-- vim.api.nvim_set_keymap('n', '<leader>pg', ':!pandoc % -o %:r.pdf<CR>', { noremap = true, silent = true })
lua/vim-options.lua:-- vim.api.nvim_set_keymap('n', '<leader>pv', ':!open %:r.pdf<CR>', { noremap = true, silent = true })
lua/vim-options.lua:vim.keymap.set('n', '<leader>pg', function()
lua/plugins/treesitter.lua:            vim.keymap.set("n", "<leader>ti", ":TSInstallInfo<CR>", {  noremap = true, silent = true, desc = "show installation info" })
lua/plugins/treesitter.lua:        vim.keymap.set("n", "<leader>tp", ":TSPlaygroundToggle<CR>", {  noremap = true, silent = true, desc = "toggle left window for playground info" })
lua/plugins/treesitter.lua:        vim.keymap.set("n", "<leader>tc", ":TSContextToggle<CR>", {  noremap = true, silent = true, desc = "toggle top line for context info" })
lua/plugins/debugging.lua:      vim.keymap.set('n', '<leader>db', function() dap.toggle_breakpoint() end)
lua/plugins/debugging.lua:      vim.keymap.set('n', '<leader>dc', function() dap.continue() end)
lua/plugins/debugging.lua:      vim.keymap.set('n', '<leader>dt', function() dap.terminate() end)
lua/plugins/debugging.lua:      vim.keymap.set('n', '<leader>dv', function() dap.step_over() end)
lua/plugins/debugging.lua:      vim.keymap.set('n', '<leader>di', function() dap.step_into() end)
lua/plugins/debugging.lua:      vim.keymap.set('n', '<leader>do', function() dap.step_out() end)
lua/plugins/vimtex.lua:    vim.keymap.set("n", "<leader>xt", ":VimtexTocToggle<CR>", { desc = "Toggle TOC" })
lua/plugins/vimtex.lua:    vim.keymap.set("n", "<leader>xc", ":VimtexClean<CR>", { desc = "clean compiler files after problem" })
lua/plugins/vimtex.lua:    vim.keymap.set("n", "<leader>xv", ":VimtexView<CR>", { desc = "view PDF of current Latex file" })
lua/plugins/vimtex.lua:    vim.keymap.set("n", "<leader>xx", ":VimtexCompile<CR>", { desc = "Toggle latex compiler on/off" })
lua/plugins/vimtex.lua:    vim.keymap.set("n", "<leader>xe", ":VimtexQuickfix<CR>", { desc = "Toggle latex compiler on/off" })
lua/plugins/fugitive.lua:    { "<leader>gs", ":G<CR>", desc = "Git Status (Fugitive)" },
lua/plugins/fugitive.lua:    { "<leader>gd", ":Gdiff<CR>", desc = "Git Diff (HEAD vs current)" },
lua/plugins/fugitive.lua:    { "<leader>gb", ":Git blame<CR>", desc = "Git Blame" },
lua/plugins/telescope.lua:            vim.keymap.set("n", "<leader>ff", builtin.find_files, { desc = "find file fuzzy with picker"})
lua/plugins/telescope.lua:            vim.keymap.set("n", "<leader>fg", builtin.live_grep, { desc = "Find expression with grep in folder"}) -- live_grep requires ripgrep -> 'brew install ripgrep' does the trick
lua/plugins/telescope.lua:            vim.keymap.set("n", "<leader>fm", ':Telescope marks<CR>', { noremap = true, silent = true, desc = "find mark with Picker" })
lua/plugins/telescope.lua:            vim.keymap.set("n", "<leader>fb", ':Telescope buffers<CR>', { desc = "Find buffer with picker"})
lua/plugins/telescope.lua:            vim.keymap.set("n", "<leader>fc", ":Telescope bibtex<CR>", { desc = "Find BibTeX Citation with Picker" })
lua/plugins/telescope.lua:            vim.keymap.set("n", "<leader>ft", function()
lua/plugins/none_ls.lua:        vim.keymap.set("n", "<leader>lf", vim.lsp.buf.format, {desc = "format text according to LSP rules"})
lua/plugins/neo-tree.lua:		-- vim.keymap.set('n', '<leader>nf', ':Neotree filesystem reveal left focus <CR>')
lua/plugins/neo-tree.lua:		-- vim.keymap.set('n', '<leader>nb', ':Neotree buffers left focus <CR>')
lua/plugins/neo-tree.lua:		vim.keymap.set('n', '<leader>nc', ':Neotree close <CR>')
lua/plugins/refactoring.lua:        vim.keymap.set("n", "<leader>ru", ":GenerateClassDiagram<CR>", { desc = "Generate Python UML Diagram of current python file" })
lua/plugins/refactoring.lua:        vim.keymap.set({ "n", "x" }, "<leader>re", function() return require('refactoring').refactor('Extract Function') end, { expr = true })
lua/plugins/refactoring.lua:        vim.keymap.set({ "n", "x" }, "<leader>rf", function() return require('refactoring').refactor('Extract Function To File') end, { expr = true })
lua/plugins/refactoring.lua:        vim.keymap.set({ "n", "x" }, "<leader>ri", function() return require('refactoring').refactor('Inline Function') end, { expr = true })
lua/plugins/refactoring.lua:        -- vim.keymap.set({ "n", "x" }, "<leader>rv", function() return require('refactoring').refactor('Extract Variable') end, { expr = true })
lua/plugins/refactoring.lua:        -- vim.keymap.set({ "n", "x" }, "<leader>ri", function() return require('refactoring').refactor('Inline Variable') end, { expr = true })
lua/plugins/refactoring.lua:        -- vim.keymap.set({ "n", "x" }, "<leader>rbb", function() return require('refactoring').refactor('Extract Block') end, { expr = true })
lua/plugins/refactoring.lua:        -- vim.keymap.set({ "n", "x" }, "<leader>rbf", function() return require('refactoring').refactor('Extract Block To File') end, { expr = true })
lua/plugins/lsp-config.lua:            vim.keymap.set("n", "<leader>le", vim.diagnostic.open_float, { desc = "Show error/warning message" })
lua/plugins/lsp-config.lua:			vim.keymap.set("n", "<leader>lh", vim.lsp.buf.hover, { desc = "show pop up info to method or type"})
lua/plugins/lsp-config.lua:			vim.keymap.set("n", "<leader>ra", vim.lsp.buf.code_action, { desc = "shows pop info from LSP actions"})
lua/plugins/lsp-config.lua:            vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, { desc = "Rename Symbol" })
lua/plugins/lsp-config.lua:            vim.keymap.set("n", "<leader>fr", require("telescope.builtin").lsp_references, { desc = "Picker for References" })
lua/plugins/lsp-config.lua:            vim.keymap.set("n", "<leader>fd", function()
